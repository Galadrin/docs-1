(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{655:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"pools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pools"}},[e._v("#")]),e._v(" Pools")]),e._v(" "),a("p",[e._v("Generally, storage pools (or just pools) can be described as discrete entities arranged around specific data sources.\nAnyone can create them through governance and can store any data stream.")]),e._v(" "),a("p",[e._v("Protocol nodes have to run with the specified pool runtime for a pool to function. If specific criteria are met,\npools distribute $KYVE to designated node runners.")]),e._v(" "),a("p",[e._v("A pool always requires two instructions:")]),e._v(" "),a("ul",[a("li",[e._v("How to retrieve data from a data source")]),e._v(" "),a("li",[e._v("How to validate this data")])]),e._v(" "),a("p",[e._v("These instructions are defined in the pools "),a("em",[e._v("runtime")]),e._v(". Because data can look very different and every data stream\nhas its unique features, other runtimes exist for different data streams. For example, to archive\nthe Ethereum blockchain, the runtime will be "),a("code",[e._v("@kyve/evm")]),e._v(". Besides Ethereum, this runtime can also archive other EVM chains\nlike Moonbeam or Aurora. For example, suppose you want to archive Solana. In that case, you need to run a different runtime specially designed for Solana data, ' @kyve/solana`.")])])}),[],!1,null,null,null);t.default=r.exports}}]);
